AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Timeout: 15
    MemorySize: 512
    Environment:
      Variables:
        AWS_REGION: !Ref AWS::Region
        PINECONE_API_KEY: !Ref PineconeApiKey
        PINECONE_INDEX_NAME: !Ref PineconeIndexName
        PINECONE_ENVIRONMENT: !Ref PineconeEnvironment
        GEMINI_API_KEY: !Ref GeminiApiKey
        APIKEYS_TABLE: !Sub "zuno-apikeys-${AWS::Region}-${AWS::AccountId}"
        PROJECTS_TABLE: !Sub "zuno-projects-${AWS::Region}-${AWS::AccountId}"
        QUERIES_TABLE: !Sub "zuno-queries-${AWS::Region}-${AWS::AccountId}"
        USERS_TABLE: !Sub "zuno-users-${AWS::Region}-${AWS::AccountId}"
        S3_BUCKET_NAME: !Ref ZunoBucket
        EMBEDDING_LAMBDA_NAME: !Ref EmbeddingFunction

Resources:
  # Shared HTTP API
  ZunoHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowHeaders: ["*"]
        AllowMethods: [GET, POST, PUT, DELETE, OPTIONS]

  # -------- Lambda Functions (Image-based) --------
  RegisterFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Events:
        RegisterApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref ZunoHttpApi
            Path: /api/register
            Method: POST
    Metadata:
      DockerTag: ai-register-lambda
      DockerContext: .
      Dockerfile: NodeRegister.Dockerfile
      DockerCMD: ["handlers/registerHandler.handler"]
    Policies:
      - DynamoDBCrudPolicy: { TableName: !Ref UsersTable }
      - DynamoDBCrudPolicy: { TableName: !Ref ProjectsTable }
      - DynamoDBCrudPolicy: { TableName: !Ref ApiKeysTable }
      - DynamoDBCrudPolicy: { TableName: !Ref QueriesTable }

  ChatFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Events:
        ChatApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref ZunoHttpApi
            Path: /api/chat/{projectId}
            Method: POST
    Metadata:
      DockerTag: ai-chat-lambda
      DockerContext: .
      Dockerfile: NodeChat.Dockerfile
      DockerCMD: ["handlers/aiChatHandler.handler"]
    Policies:
      - DynamoDBReadPolicy: { TableName: !Ref QueriesTable }

  EmbeddingFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 300
      MemorySize: 1024
    Metadata:
      DockerTag: ai-embedding-lambda
      DockerContext: .
      Dockerfile: EmbeddingHandler.Dockerfile
      DockerCMD: ["handlers/embeddingHandler.handler"]
    Policies:
      - S3ReadPolicy: { BucketName: !Ref ZunoBucket }

  ScrapingFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 300
      MemorySize: 1024
    Metadata:
      DockerTag: ai-scraper-lambda
      DockerContext: .
      Dockerfile: PythonScraper.Dockerfile
      DockerCMD: ["handlers/scrapingHandler.handler"]
    Policies:
      - S3WritePolicy: { BucketName: !Ref ZunoBucket }
      - Statement:
          Effect: Allow
          Action: lambda:InvokeFunction
          Resource: !GetAtt EmbeddingFunction.Arn

  # -------- DynamoDB Tables --------
  UsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "zuno-users-${AWS::Region}-${AWS::AccountId}"
      AttributeDefinitions: [{ AttributeName: userId, AttributeType: S }]
      KeySchema: [{ AttributeName: userId, KeyType: HASH }]
      BillingMode: PAY_PER_REQUEST

  QueriesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "zuno-queries-${AWS::Region}-${AWS::AccountId}"
      AttributeDefinitions: [{ AttributeName: id, AttributeType: S }]
      KeySchema: [{ AttributeName: id, KeyType: HASH }]
      BillingMode: PAY_PER_REQUEST

  ApiKeysTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "zuno-apikeys-${AWS::Region}-${AWS::AccountId}"
      AttributeDefinitions:
        - { AttributeName: keyId, AttributeType: S }
        - { AttributeName: apiKeyHash, AttributeType: S }
      KeySchema: [{ AttributeName: keyId, KeyType: HASH }]
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: ApiKeyHashIndex
          KeySchema: [{ AttributeName: apiKeyHash, KeyType: HASH }]
          Projection: { ProjectionType: ALL }

  ProjectsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "zuno-projects-${AWS::Region}-${AWS::AccountId}"
      AttributeDefinitions:
        - { AttributeName: projectId, AttributeType: S }
        - { AttributeName: ownerId, AttributeType: S }
      KeySchema: [{ AttributeName: projectId, KeyType: HASH }]
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: OwnerIdIndex
          KeySchema: [{ AttributeName: ownerId, KeyType: HASH }]
          Projection: { ProjectionType: ALL }

  # -------- S3 Bucket --------
  ZunoBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "zuno-bucket-${AWS::Region}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]

Parameters:
  PineconeApiKey: { Type: String }
  PineconeIndexName: { Type: String }
  PineconeEnvironment: { Type: String }
  GeminiApiKey: { Type: String }

Outputs:
  HttpApiUrl:
    Description: Base URL for the HttpApi
    Value: !Ref "ZunoHttpApi"
